openapi: 3.0.0
info:
  title: Node.js CRUD API
  version: 1.0.0
  description: API documentation for the Node.js CRUD server with Express.js and MongoDB.
paths:
  /api/users:
    get:
      summary: Retrieve all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/{userId}:
    get:
      summary: Retrieve a user by ID
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: The requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to delete
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: The user ID
        username:
          type: string
          description: The username
        email:
          type: string
          description: The user's email address
        createdAt:
          type: string
          format: date-time
          description: Date and time when the user was created
    UserInput:
      type: object
      properties:
        username:
          type: string
          description: The username
          example: john_doe
        email:
          type: string
          format: email
          description: The user's email address
          example: john@example.com
        password:
          type: string
          description: The user's password
          example: password123
